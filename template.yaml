AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  # API Gateway para Upload de Notas Fiscais
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowOrigin: "'http://127.0.0.1:5500'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowMethods: "'OPTIONS,GET,POST,PUT,DELETE'"
        AllowCredentials: true
      BinaryMediaTypes:
        - "multipart/form-data"

  # Lambda para Upload de Notas Fiscais
  InvoiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.12
      CodeUri: lambda_api_gateway
      MemorySize: 256
      Timeout: 30
      Policies:
        - S3CrudPolicy:
            BucketName: notas-fiscais-07
      Environment:
        Variables:
          BUCKET_NAME: notas-fiscais-07
          STEP_FUNCTION_ARN: !Ref InvoiceProcessorStateMachine  
      Events:
        Api:
          Type: Api
          Properties:
            Path: /api/v1/invoice
            Method: POST
            RestApiId: !Ref Api

  # ðŸ“Œ Bucket para armazenar as notas fiscais
  MinhasNotasFiscaisBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: notas-fiscais-07

  # ðŸ“Œ Step Function para processar notas fiscais
  InvoiceProcessorStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Processa as notas fiscais apÃ³s o upload",
          "StartAt": "ExtrairDadosTextract",
          "States": {
            "ExtrairDadosTextract": {
              "Type": "Task",
              "Resource": "${LambdaTextract.Arn}",
              "Next": "AnalisarDadosNLTK"
            },
            "AnalisarDadosNLTK": {
              "Type": "Task",
              "Resource": "${LambdaNLTK.Arn}",
              "End": true
            }
          }
        }

  # ðŸ“Œ IAM Role para Step Functions
  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - "states.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: StepFunctionLambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "lambda:InvokeFunction"
                Resource: 
                  - !GetAtt LambdaTextract.Arn
                  - !GetAtt LambdaNLTK.Arn

  # ðŸ“Œ Lambda Textract - Processa OCR e chama a Lambda NLTK
  LambdaTextract:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.12
      CodeUri: lambda_textract
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt LambdaTextractRole.Arn
      Environment:
        Variables:
          NEXT_LAMBDA_NLTK: !Ref LambdaNLTK
          BUCKET_NAME: notas-fiscais-07
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref MinhasNotasFiscaisBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: NFs/

  # ðŸ“Œ IAM Role para a Lambda Textract
  LambdaTextractRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TextractS3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::notas-fiscais-07/*"
              - Effect: Allow
                Action:
                  - textract:AnalyzeDocument
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt LambdaNLTK.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # ðŸ“Œ Lambda NLTK - Estrutura os dados extraÃ­dos do Textract
  LambdaNLTK:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: LambdaNLTK
      Handler: app.lambda_handler
      Runtime: python3.12
      CodeUri: lambda_nltk
      MemorySize: 512
      Timeout: 60
      Role: !GetAtt LambdaNLTKRole.Arn

  # ðŸ“Œ IAM Role para a Lambda NLTK
  LambdaNLTKRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::notas-fiscais-07/*"

Outputs:
  # ðŸ“Œ URL para chamar a API Gateway
  ApiGatewayInvokeURL:
    Description: "URL para chamar a API Gateway"
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/v1/invoice"
